# coding=utf-8
# Author: Jianghan LI
# Question: 779.K-th_Symbol_in_Grammar
# Complexity: O(logN)
# Date: 2018-02-09


class Solution(object):

    def kthGrammar(self, N, K):
        """
        :type N: int
        :type K: int
        :rtype: int
        """
        return bin(K - 1).count('1') & 1


# Original answer:
# The answer depends only on ```K``` value, which is easy to notice and prove.
# ```
# K             =  1   2   3   4    5   6    7    8     9    10
# 0-indexed K   =  0   1  10  11  100 101  110  111  1000  1001
# Output        =  0   1   1   0    1   0    0    1     1     0
# ```
# We can observe that the answer depend on whether the number of '1' in binary K-1 is odd or even.


# Generally I don't write a lot of explanation, beacause I believe others do better for this part.
# However not for this problem and I think I should share my idea here with more details.

# **First**, you can easily find that prefix of every row is exactly the same.
# It not difficult to understand.
# Beacause every ```2 * L``` fisrt letters are generated by the same ```L``` fist letters.

# **Then**, we know that every row is the start part of the same long sequence.
# Moreover K is guaranteed to be an integer in the ```range[1, 2 ^ (N - 1)]```.
# So result depends only on value ```K```

# Suppose ```2 ^ L < K <= 2 ^ (L + 1)```.
# ```2 ^ (L - 1)``` is the biggest ```2```'s power smaller than ```K```.
# ```Kth``` number is generated from ```K - 2 ^ (L - 1)```
# ```Kth``` number is also different from ```K - 2 ^ (L - 1)```
# So we toggle ```K``` to ```K - 2 ^ L``` by subtracting ```2 ^ L```

# We repeat the process until we toggle ```K``` to ```1```, which mean we need to substract ``` K - 1``` in total.
# What we should do is transfer ```K - 1``` in binary so that we can easily find how many times we need to toggle.

# **For example ```K = 8```**
# we need to substract ```K - 1 = 7 = 111``` in binary.
# So we need to substract ```100```, ```10``` and ```1```, which are ```4, 2, 1``` in decimal.
# We toggle ```K``` from ```8``` to ```4```, ```2``` and finally ```1```.

# **For example ```K = 9```**
# we need to substract ```K - 1 = 8 = 1000``` in binary.
# So we need to substract ```1000```, which is ```8``` in decimal.
# We toggle ```K``` from ```9``` to ```1``` directly.


# **Conclusion**
# we turn this problem to just count ```1bits```.
# We can observe that the answer depend on whether the number of ```1 bits``` in binary ```K-1``` is odd or even.
# Now you may have many ways to solve this problem.
# In Python, I transfer K to binary.
# In Java, bitCount is ready for use.
# In C++, I use the trick ```K & (K - 1)``` to drops the lowest bit.
